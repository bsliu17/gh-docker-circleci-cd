version: 2
jobs:
  build:
    working_directory: /dockerapp
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip=9.0.0-r1
            pip install awscli==1.11.76
      - run:
          name: Build application Docker image
          command: |
            docker build -t app .
      # If we had
      #- run:
      #    name: Run mongo db
      #    command: |
      #      docker run --name mongo_test -d mongo
      #- run:
      #    name: Run tests
      #    command: |
      #      docker run -a STDOUT -it -p 4100:3000 --link mongo_test:db --name test_app app gulp test
      #      #docker exec -t test_app gulp test
      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then

              CLUSTER='test-app'
              FAMILY='test-app'
              DOCKER_IMAGE='circleci-01'
              TASK='test-app'
              SERVICE='app-service'

              # Login to AWS
              aws configure set region $AWS_REGION
              $(aws ecr get-login)

              # Tag and push docker image
              docker tag app $AWS_ACCOUNT_ID.dkr.ecr.us-west-2.amazonaws.com/$DOCKER_IMAGE:$CIRCLE_SHA1
              docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_IMAGE:$CIRCLE_SHA1
            fi
            # if [ "${CIRCLE_BRANCH}" == "master" ]; then

            #   # Create task for docker deploy
            #   task_template='[
            #     {
            #       "name": "%s",
            #       "image": "%s.dkr.ecr.%s.amazonaws.com/%s:%s",
            #       "essential": true,
            #       "memoryReservation": 1000,
            #       "portMappings": [
            #         {
            #           "containerPort": 3000,
            #           "hostPort": 80
            #         }
            #       ],
            #       "environment" : [
            #           { "name" : "NODE_ENV", "value" : "production" }
            #       ]
            #     }
            #   ]'
            #   echo "$task_template"

            #   task_def=$(printf "$task_template" $TASK $AWS_ACCOUNT_ID $AWS_REGION $TASK $CIRCLE_SHA1)

            #   # Register task definition
            #   json=$(aws ecs register-task-definition --container-definitions "$task_def" --family "$FAMILY")

            #   # Grab revision # using regular bash and grep
            #   revision=$(echo "$json" | grep -o '"revision": [0-9]*' | grep -Eo '[0-9]+')

            #   # Deploy revision
            #   aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --task-definition "$TASK":"$revision"
            #   return 0
            # fi



# version: 2
# jobs:
#   build:
#     working_directory: /dockerapp
#     docker:
#       - image: 176616422154.dkr.ecr.us-west-2.amazonaws.com/circleci-01:latest
#         aws_auth:
#             aws_access_key_id: $AWS_SECRET_ACCESS_KEY
#             aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY  # or project UI envar reference
#     steps:
#       - checkout
#       - setup_remote_docker
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --no-cache py-pip=9.0.0-r1
#             pip install docker-compose==1.15.0
#       - run:
#           name: Run tests
#           command: |
#             docker-compose up -d
#             docker-compose run dockerapp python test.py
#       - deploy:
#           name: Push application Docker image
#           command: |
#             # docker login -e $DOCKER_HUB_EMAIL -u $DOCKER_HUB_USER_ID -p $DOCKER_HUB_PWD
#             docker tag circleci-01:latest 176616422154.dkr.ecr.us-west-2.amazonaws.com/circleci-01:latest
#             docker push 176616422154.dkr.ecr.us-west-2.amazonaws.com/circleci-01:latest

#             # docker tag dockerapp_dockerapp $DOCKER_HUB_USER_ID/dockerapp:$CIRCLE_SHA1
#             # docker tag dockerapp_dockerapp $DOCKER_HUB_USER_ID/dockerapp:latest
#             # docker push $DOCKER_HUB_USER_ID/dockerapp:$CIRCLE_SHA1
#             # docker push $DOCKER_HUB_USER_ID/dockerapp:latest
